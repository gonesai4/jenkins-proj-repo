def ansible = [:]
  ansible.name = 'ansible'
  ansible.host = '172.31.52.99'
  ansible.user = 'centos'
  ansible.password = 'Rnstech@123'
  ansible.allowAnyHosts = true
def kops = [:]
  kops.name = 'kops'
  kops.host = '172.31.4.156'
  kops.user = 'centos'
  kops.password = 'Rnstech@123'
  kops.allowAnyHosts = true
pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven38"
    }

    stages {
        stage('Prepare-workspace') {
            steps {
                // Get some code from a GitHub repository
                git credentialsId: 'github_credentials', url: 'https://github.com/gonesai4/jenkins-proj-repo.git'

            }
        }
        stage('tools-setup') {
            steps {
                 sshCommand remote: ansible, command: 'cd jenkins-proj-repo; git pull'
                 sshCommand remote: ansible, command: 'cd jenkins-proj-repo; ansible-playbook -i hosts tools/sonarqube/sonar-install.yaml'
                 // sshCommand remote: ansible, command: 'cd jenkins-proj-repo; ansible-playbook -i hosts tools/docker/docker-install.yml'

                 sshCommand remote: kops, command: "cd jenkins-proj-repo; git pull"
	         sshCommand remote: kops, command: "kubectl apply -f jenkins-proj-repo/k8s-code/staging/namespace/staging-ns.yml"
	         sshCommand remote: kops, command: "kubectl apply -f jenkins-proj-repo/k8s-code/prod/namespace/prod-ns.yml"
            }
        }
	stage('SonarQube analysis') {
            steps{
                echo "Sonar Scanner"
                   sh "mvn clean compile"
                withSonarQubeEnv('sonar-7') { 
                   sh "mvn sonar:sonar"
                }                     
            }
        }
    }
}
